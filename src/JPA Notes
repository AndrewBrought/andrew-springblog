Data Technologies:


JPA - a Java ORM specification for how to interact with persistence in an application
ORM - Object Relational Mapper: converting objects into a DB table records and vice versa
Spring Data- a project of the Spring Framework concerning data management
Spring Data JPA - a subproject (module) defining how a JPA is integrated into Spring
Hibernate - the actual implementation of JPA (the provider); supported by Spring Data JPA, among others.
Repositories - interfaces that further abstract from DAOs and contain methods to interact with data.
Excellent discussions of the above... https://coderanch.com/t/685335/certification/JPA-Spring-JPA-Spring-Data


Application properties for the app.props file:
spring.datasource.url=jdbc:mysql://localhost/adlister_db?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC
spring.datasource.username=ganymede_user
spring.datasource.password=getmein
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

Dependency required addition:
...
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
</dependency>
...

Create user for db:
create user 'ganymede_user'@'localhost' identified by 'letmein';
grant all on ganymede_spring_db.* to 'ganymede_user'@'localhost';

This model class creates a table:

@Entity
@Table(name = "ads") // this sets the table name from the class name to the desired name
public class Ad {
    @Id // this annotation tells JPA to make this column the PRIMARY Key
    @GeneratedValue(strategy = GenerationType.IDENTITY) // this is equivalent to auto-increment in mysql
    private long id;

@Column(length = 50, nullable = false, unique = true)  // we can set all these elements for the column definition
    private String title;
    @Column(columnDefinition = "TEXT NOT NULL") // this will change the column definition to text
    private String description;
}

====== DATABASE AND TABLE INSTANTIATION (*Tables are built in model classes now)

spring.datasource.url=jdbc:mysql://localhost/doglister_db?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC
spring.datasource.username=doglister_user
spring.datasource.password=letmein
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql

CREATE USER 'doglister_user'@'localhost' IDENTIFIED BY 'letmein';
GRANT ALL ON doglister_db.* TO doglister_user@localhost;

DROP Table dogs;

USE doglister_db;

SHOW TABLES;
DESCRIBE dogs;


INSERT INTO dogs (age, name, reside_state)
VALUES
(2, 'Chuck', 'TX'),
(5, 'Fred', 'OH'),
(3, 'Bud', 'TN'),
(10, 'Bailey', 'AL'),
(11, 'Lexie', 'TX'),
(1, 'Snickers', 'TX'),
(6, 'Red', 'FL'),
(8, 'Barney', 'CA'),
(12, 'Bowser', 'TX');

SELECT * FROM dogs;


================  JPA NOTES CONT.D  08-04-20:  ==================

** Setup Dev Tools for Spring Boot

We need to create a repository (basically an interface) - we'll create a package called repositories
Ex: DogRepository
                                         expects 2 reference types:
                                         Object in question and reference type of Primary Key for Dog(long id;                                            must be in wrapper form)
public interface DogRepository extends JpaRepository<Dog, Long> {

    // could be useful for a search bar
    Dog findByName(String name);
    Dog findFirstByOrderByTitleAsc();

    //Can go further with @Query annotation to customize return Using JPOL /HQ:
    @Query("from Dog a where a.id like ?1")
    Dog getDogById(long dog);

    //using a native query
    @Query(nativeQuery = true, value = "SELECT title FROM dogs WHERE LENGTH "
(title) < 10"
}

Create Controller:

@Controller
public class DogController {

// dependency injection
private final DogController dogsDao;
private final PostController postDao;

public DogController(DogRepository dogsDao, PostRepository postDao) {
    this.dogsDao = dogsDao;
    this.post.dao = postDao;
}

// Get single dog back ...will have to @override to string method in Dog class
    @GetMapping("/dogs/{id}"
    @ResponseBody
    public String getDog(@PathVariable long id) {
    return dogsDao.getOne(id).toString();
    }


    @GetMapping("/dogs")
    @ResponseBody
    public List<Dog> getDogs() {
        return dogsDao.findAll();
    }

    // Should be a post method but haven't created a view to submit...RETURNS JSON
   @GetMapping("/dogs/save")
    @ResponseBody
    public String save() {
    //the save method works for both inserting and updating (depending on if the object has an id or not)
    Dog dogToSave = new Dog();
    dogToSave.setTitle("New Dog!");
    dogToSave.setDescription("This is a new Dog!");
    dogsDao.save(dogToSave)
        dogs.Dao.save();
        //This redirects to the "dogs" url where we view all dogs
        return "redirect:/dogs";
    }

    //simple JSON Return
    @GetMapping("/dogs")
    @ResponseBody
    public List<Dog> getdogs() {
    return dogsDao.findAll();
    }


    //RETURNS TO VIEW (.html)
    @GetMapping("dogs/view")
    public String getDogsIndex(Model model) {
        model.addAttribute("dogs", dogsDao.findAll());
        return "dogs/index";
    }

    @GetMapping("/dogs/test")
    @ResponseBody
    public String getTestDogs() {
    return dogs.Dao.findByTitle("Rover").toString();
    }

}

====== ONE TO MANY RELATIONSHIPS

Ads and Comments (one to many)

One Ad may have MANY comments

One Ad may have ONE post

ads
@Id
@GenerateValue(strategy = GenerationType.IDENTITY)
   private long id;
    title
    description

     @OneToMany(cascade = CascadeType.ALL, mappedBy = "parentAd")
       private List<Comment> comments;
     // (user_id)

@Entity
@Table(name = comments)
public class comment {
    @Id
    @GenerateValue(strategy = GenerationType.IDENTITY)
    private long id;

   private String content;
 @ManyToOne
    @JoinColumn (name = "ad_id")
    private Ad parentAd; // (FOREIGN KEY relates to ads id)

    // (user_id)


** Remember:
One to many relationship, there should be a foreign key on the MANY side

users
    id <-
    username
    email
    password

posts
    id
    title
    body
    (Need) user_id FK - relates to the users table ^

    Now We create a RELATIONSHIP Controller
    @Controller
    public class RelationshipController {

    private final AdRepository adsDao;

    public RelationshipController(AdRepository adsDao) {
    this.adsDao = adsDao;
    }

    // view all ads and comments as JSON
    @GetMapping("/rel/ads")
    @ResponseBody
    public List<Ad> returnAllAds() {
           List<Ad> ads = adsDao.findAll();
           // Showing how to dig into the relationship to pull info from another entity
            String content = ads.get(0).getComments().get(0).getContent();
            System.out.println(content);
            return adsDao.findAll();
    }

    (Thymeleaf view)
        @GetMApping("/rel/ads/view")
        public String returnAdsView(Model model) {
            model.addAttribute("ads", adsDao.findAll());
            return "rel/ads";
        }



    }

