Data Technologies:


JPA - a Java ORM specification for how to interact with persistence in an application
ORM - Object Relational Mapper: converting objects into a DB table records and vice versa
Spring Data- a project of the Spring Framework concerning data management
Spring Data JPA - a subproject (module) defining how a JPA is integrated into Spring
Hibernate - the actual implementation of JPA (the provider); supported by Spring Data JPA, among others.
Repositories - interfaces that further abstract from DAOs and contain methods to interact with data.
Excellent discussions of the above... https://coderanch.com/t/685335/certification/JPA-Spring-JPA-Spring-Data


Application properties for the app.props file:
spring.datasource.url=jdbc:mysql://localhost/adlister_db?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC
spring.datasource.username=ganymede_user
spring.datasource.password=getmein
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

Dependency required addition:
...
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
</dependency>
...

Create user for db:
create user 'ganymede_user'@'localhost' identified by 'letmein';
grant all on ganymede_spring_db.* to 'ganymede_user'@'localhost';

This model class creates a table:

@Entity
@Table(name = "ads") // this sets the table name from the class name to the desired name
public class Ad {
    @Id // this annotation tells JPA to make this column the PRIMARY Key
    @GeneratedValue(strategy = GenerationType.IDENTITY) // this is equivalent to auto-increment in mysql
    private long id;

@Column(length = 50, nullable = false, unique = true)  // we can set all these elements for the column definition
    private String title;
    @Column(columnDefinition = "TEXT NOT NULL") // this will change the column definition to text
    private String description;

}


